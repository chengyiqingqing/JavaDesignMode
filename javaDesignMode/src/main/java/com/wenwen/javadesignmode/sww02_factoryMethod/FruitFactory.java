package com.wenwen.javadesignmode.sww02_factoryMethod;

/**
 * Created by sww on 2018/4/17.
 * 1.什么是工厂方法模式?
 *      定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类当中。核心工厂类不再负责产品的创建，
 *      这样核心类成为一个抽象工厂角色，仅负责具体工厂子类必须实现的接口。这样进一步抽象化的好处是
 *      使得工厂方法模式可以使系统在不修改具体工厂角色的情况下引进新的产品。
 *      （即为有一个新的产品，那么就添加产品工厂和产品，出来就行了）
 *
 * 2.模式中包含的角色及其职责
 *   （定）1.抽象工厂（Creator）角色  ---  工厂方法模式的核心，任何工厂类都必须实现这个接口。
 *   （动）2.具体工厂（ Concrete  Creator）角色 --- 具体工厂类是抽象工厂的一个实现，负责实例化产品对象。
 *   （定）3.抽象（Product）角色  --- 工厂方法模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。
 *              （封装入具体工厂）4.具体产品（Concrete Product）角色 --- 工厂方法模式所创建的具体实例对象
 *
 * 3.优点：
 *      当系统扩展需要添加新的产品对象时，仅仅需要添加一个具体对象以及一个具体工厂对象。
 *      原有工厂对象不需要进行任何修改，也不需要修改客户端，很好的符合了“开放－封闭”原则
 *      而简单工厂模式（只有一个具体工厂）在添加新产品对象后不得不修改工厂方法，扩展性不好。
 *
 */

public interface FruitFactory {

    Fruit getOneFruit();

}
